# import grpc
# import AIService_pb2 as pb2
# import AIService_pb2_grpc as pb2_grpc
# def run():
#     # 连接 rpc 服务器
#     channel = grpc.insecure_channel('localhost:50051')
#     # 调用 rpc 服务
#     stub = pb2_grpc.FaceStub(channel)
#     response = stub.FaceDetect(pb2.DetectRequest(Id='3',shouldStudents='0121810880204:0.07449723035097122,-0.0635077953338623,-0.08589383214712143,-0.013460466638207436,0.08448546379804611,0.04000774025917053,-0.047316018491983414,0.0022769817151129246,0.09547420591115952,0.012387043796479702,-0.11413606256246567,-0.033573973923921585,-0.09254490584135056,-0.15614156424999237,0.06847328692674637,0.09345153719186783,0.010843208059668541,0.010891927406191826,0.08093001693487167,-0.07824783772230148,-0.003526562824845314,-0.050174105912446976,-0.18515807390213013,-0.04572148248553276,-0.09439681470394135,0.0008491854532621801,0.05675202235579491,0.09711708873510361,-0.09600599855184555,0.06229166314005852,0.11840707808732986,0.10048507153987885,0.031233923509716988,-0.11930666118860245,-0.15503476560115814,-0.06822095066308975,-0.09573360532522202,-0.11166056990623474,0.06804901361465454,0.004575646482408047,-0.0764872208237648,-0.07850352674722672,-0.004103292711079121,-0.17855076491832733,0.016681812703609467,0.03896217793226242,-0.004194659646600485,0.08975771069526672,-0.07929855585098267,0.04648986831307411,-0.05455863103270531,-0.030710648745298386,0.0014487684238702059,0.18434830009937286,0.1389344334602356,-0.12622465193271637,-0.0677935928106308,-0.08330050855875015,0.08793055266141891,-0.026701902970671654,-0.13530300557613373,-0.09983081370592117,0.12000302225351334,0.1695191115140915,0.15086019039154053,-5.5660493671894073e-05,0.05754080042243004,-0.012601355090737343,-0.09165633469820023,-0.02829243242740631,-0.03002784587442875,-0.14145544171333313,0.08758557587862015,0.06911355257034302,-0.035742245614528656,0.15380412340164185,-0.08660664409399033,0.11580658704042435,0.04436510428786278,0.025475487112998962,-0.0949515774846077,-0.04114442691206932,-0.09148521721363068,-0.06363323330879211,0.10518871992826462,-0.2051757574081421,-0.12361117452383041,-0.058402322232723236,-0.07803061604499817,0.0890074297785759,0.15742766857147217,-0.009120302274823189,-0.07042606920003891,-0.05944380909204483,-0.12200270593166351,-0.018696840852499008,-0.19731009006500244,0.1268489509820938,-0.10828985273838043,-0.05385657772421837,-0.026966676115989685,-0.0036824403796344995,0.09004276245832443,-0.08519122749567032,-0.055640943348407745,0.023164764046669006,-0.18567146360874176,0.11144320666790009,-0.05077343434095383,0.024480754509568214,-0.038098499178886414,0.02863006666302681,-0.11898742616176605,-0.04856664314866066,0.043281715363264084,0.020992398262023926,-0.024090280756354332,-0.0244552344083786,-0.04029158875346184,0.05647753179073334,0.02737964130938053,-0.05988147482275963,0.07328982651233673,0.10984479635953903,0.0756780207157135,-0.1556977778673172,0.026927724480628967,-0.0263320654630661;0121810880207:0.0038461280055344105,-0.09137902408838272,-0.0604860894382,0.006215541623532772,-0.07307124137878418,-0.041468266397714615,-0.004412480164319277,-0.08760541677474976,-0.06359124928712845,-0.15574757754802704,-0.01884612813591957,0.018391340970993042,0.05407952517271042,-0.18021471798419952,0.11573641747236252,0.02993333712220192,0.023297686129808426,0.0036844895221292973,-0.0199102945625782,0.03261945769190788,-0.15616099536418915,0.01392586249858141,-0.11183992773294449,-0.049209363758563995,-0.04330701008439064,0.05824527144432068,0.011219031177461147,0.1261225789785385,-0.10031211376190186,-0.049790047109127045,0.10533689707517624,0.0547742061316967,-0.009803262539207935,-0.044511765241622925,0.0035714437253773212,0.021796762943267822,-0.06600166857242584,-0.06739397346973419,0.10977689921855927,0.06558770686388016,-0.09108429402112961,0.06284981966018677,0.04794022813439369,-0.12952882051467896,0.06225834786891937,-0.02852063998579979,0.014335913583636284,0.15058691799640656,-0.05739200487732887,0.0737784132361412,0.05619661882519722,0.02609652653336525,0.026637759059667587,0.0772685706615448,0.09059394896030426,0.05601828917860985,-0.10108039528131485,0.08956275135278702,0.014308604411780834,-0.030596276745200157,0.04399479553103447,-0.10137303173542023,-0.05011875554919243,0.23667384684085846,0.1922336220741272,0.0358012355864048,0.03585987910628319,0.031110292300581932,-0.09422128647565842,0.0028774114325642586,0.021996958181262016,-0.1298804134130478,0.05659550800919533,-0.05341499671339989,0.03216740861535072,0.06312631815671921,-0.10057538002729416,0.10371057689189911,-0.10507404059171677,-0.021494407206773758,-0.049355797469615936,0.026667406782507896,-0.09075070172548294,0.12752363085746765,0.11444651335477829,-0.25122109055519104,0.01932728849351406,-0.1199486255645752,-0.23450936377048492,-0.11397822946310043,0.07348941266536713,-0.10495571792125702,-0.08281420916318893,-0.12983591854572296,-0.07182206213474274,0.018261384218931198,-0.10812326520681381,0.04754147678613663,-0.04246808588504791,-0.04515421763062477,-0.0264921672642231,0.05298726260662079,0.058533620089292526,0.01791396178305149,-0.13430382311344147,0.049912407994270325,-0.03813978657126427,-0.002543714363127947,-0.009387641213834286,-0.1504587084054947,-0.021231619641184807,0.0845225378870964,0.05277116224169731,-0.03477681428194046,0.08335155248641968,0.15872254967689514,-0.02326297201216221,0.08716213703155518,-0.054736968129873276,0.11150901764631271,0.09443094581365585,-0.12722435593605042,0.21611548960208893,0.016253340989351273,0.06963738054037094,-0.19544164836406708,-0.02073698304593563,0.05084143951535225'))
#     print("client received: " + response.actualStudents)
#     # response = stub.FaceRecognize(pb2.RecognizeRequest(studentId='0121810880214'))
#     # print("client received: " + response.encodings)

# if __name__ == '__main__':
#     run()
import os
import socket
import sys
import cv2
import os
import threading
import numpy as np
from net.mtcnn import mtcnn
from numpy.core.numeric import full
import utils.utils as utils
import time
from models import MobileFaceNet
import glob
import argparse
import tensorflow as tf
from AI import *
from net.inception import InceptionResNetV1
from utils.utils import detect_face, align_face

def my_cv_imread(filepath):
    # 使用imdecode函数进行读取
    img = cv2.imdecode(np.fromfile(filepath,dtype=np.uint8),-1)
    return img
def cv_imwrite(savePath,tem):
    cv2.imencode('.jpg',tem)[1].tofile(savePath)  # 保存图片
#人脸裁减
path='D:/Documents/demos/cdc_face/keras-face-recognition-master/cleaned'
hhh=face_rec()
for root, ds, fs in os.walk(path):#获得文件夹下所有文件
    for f in fs:
            #读取文件
            fullname = os.path.join(root, f)#文件全名
            img=my_cv_imread(fullname)
        
            img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
            rectangles = hhh.mtcnn_model.detectFace(img, hhh.threshold)
            if len(rectangles)!=1:
                os.remove(fullname)
                print(fullname+'delete')
                continue
            else:
                print(fullname)
                rectangles = utils.rect2square(np.array(rectangles))
                rectangle = rectangles[0]
                landmark = np.reshape(rectangle[5:15], (5,2)) - np.array([int(rectangle[0]), int(rectangle[1])])
                crop_img = img[int(rectangle[1]):int(rectangle[3]), int(rectangle[0]):int(rectangle[2])]
                crop_img, _ = utils.Alignment_1(crop_img,landmark)
                crop_img=cv2.resize(crop_img, (160, 160))
                crop_img=cv2.cvtColor(crop_img, cv2.COLOR_RGB2BGR)
                os.remove(fullname)
                print('D:/Documents/demos/cdc_face/keras-face-recognition-master/datasets/'+f.split('_')[0])
                if os.path.exists('D:/Documents/demos/cdc_face/keras-face-recognition-master/datasets/'+f.split('_')[0]):
                   a=0
                else :
                    os.mkdir('D:/Documents/demos/cdc_face/keras-face-recognition-master/datasets/'+f.split('_')[0]) 
                cv_imwrite(fullname.replace('cleaned','datasets'),crop_img)
                